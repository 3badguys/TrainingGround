* Introduction

This is the training ground for perl.

* Perl Source

http://www.cpan.org/src/

* CPAN Module Installation

#+BEGIN_SRC shell
  perl -MCPAN -e 'install DBD::mysql'

  perl -MCPAN -e shell
  cpan> help
  cpan> install DBD::mysql
  cpan> quit
#+END_SRC

* Perldoc

https://perldoc.perl.org/

** perldoc frequently-used commands
#+BEGIN_SRC  shell
  sudo apt install perl-doc # Install perl-doc

  perldoc perldoc # Lookup perl documentation

  perldoc perl    # Get a list of topics
  perldoc perlop  # Lookup kyewords(For example, if, while, for, etc)
  perldoc perlsyn # Lookup operators(For example, ==, ++, =~, etc)
  perldoc pelrvar # Lookup builtin variables(For example, @INC, %INC, @ARG, etc)

  perldoc -f <BuiltinFunction> # Lookup function. For example, perldoc -f printf

  perldoc -v <PerlVariable> # Lookup perl predefined variable. For example, perldoc -v '$/'

  perldoc <Module>    # Lookup module. For example, perldoc Data::Dumper
  perldoc -m <Module> # Lookup module's source code. For example, perldoc -m Data::Dumper

  perldoc -q <FAQ-Keyword> # Lookup perl FAQ. For example, perldoc -q database
#+END_SRC

* Usage

** First Program
#+BEGIN_SRC shell
  perl ./helloworld.pl
#+END_SRC

** Frequently-used options
| option | describtion  |
|--------+--------------|
| -d     | debug        |
| -c     | check syntax |
| -e     | execute code |

* Perl Details

** variable prefix: sigil
In Perl, every variable name must start with one of {$ @ %}.
+ $ means the VALUE of the variable is a “scalar”. i.e. string, number.
+ @ means the VALUE of the variable is a array.
+ % means the VALUE of the variable is a hash table (aka dictionary, associative list.).

** show module
+ @INC → predefined variable. A list of library search paths.
+ %INC → predefined variable. A hash of loaded modules.

** quote string
+ 'single quote' or q[]  → everything is literal.
+ "double quote" or qq[] → ① Backslash is char escape. ② Variables will be evaluated.

** True and False
Perl does not have a boolean type. Basically, anything that seems should be false, is false. (of course, it can be tricky). The following are false:
+ 0
+ undef
+ "" empty string
+ empty array
+ empty hash
Everything else is true.

#+BEGIN_SRC perl
  # Perl does automatic conversion between number and string,
  # so '0' is false in some contexts because it converts to 0.
  if ("0") { print "yes"} else { print "no"}   # ⇒ no
#+END_SRC

** exit loop
+ next → start the next iteration.
+ last → exit the loop.

** compare as number or as string
The following operators returns -1 if left operand is less than the right operand. If equal, it returns 0, else 1.
+ x <=> y → compare x y as numbers.
+ x cmp y → compare x y as strings.

** system call
+ qx()
+ system()

** environment variable
#+BEGIN_SRC perl
  print $ENV{"HOME"};
#+END_SRC

** pure function consturct
Written as /sub {…}/, and applied to argument by the form /pureFunction->(arg)/. For example, a function that squares a number and applied to 3 is written as:
#+BEGIN_SRC perl
  sub($) {$_[0]^2} -> (3)
#+END_SRC

** decorate-sort-dedecorate, aka Schwartzian transform
http://xahlee.info/perl/perl_sort.html

#+BEGIN_SRC perl
  # -*- coding: utf-8 -*-
  # perl

  # sort a array of string, by comparing the number part inside the string

  @li = ('my283.jpg','my23i.jpg','web7-s.jpg','fris88large.jpg');

  # this is “decorate-sort-dedecorate”, aka Schwartzian transform
  @li2 = map { $_->[0] } sort { $a->[1] <=> $b->[1] } map { [ $_, ($_=~m/(\d+)/)[0] ] } @li;
  #          ↑ take item               ↑ sort            ↑ create list of pairs [item,key]

  use Data::Dumper;
  print Dumper(\@li2); # ('web7-s.jpg', 'my23i.jpg', 'fris88large.jpg', 'my283.jpg')
#+END_SRC

** predefined variables
https://perldoc.perl.org/perlvar

** perl tokens
*** __PACKAGE__
__PACKAGE__ contains the name of the package which is declared at the top of any Perl module

*** __LINE__
__LINE__ token returns the value of the current line number.

*** __FILE__
__FILE__ provides the filename.

*** __END__
__END__ defines the end of the Perl code in the file. Any text that appears after __END__ is ignored by the Perl compiler.

* Perl Snippets

** List/Array
#+BEGIN_SRC perl
  # WRONG: Returns a 1-element list, or 1 in scalar context
  my $z = @a[-1];

  # RIGHT: Returns a single scalar element
  my $z = $a[-1];
#+END_SRC

** Hash Table
*** defined vs exists
#+BEGIN_SRC perl
  my %h;
  $h{'foo'} = undef;

  defined $h{'foo'} ? print 1 : print 0;
  # $h{'foo'} is not defined, so it prints 0
  exists $h{'foo'} ? print 1 : print 0;
  # but it has been initialized nonetheless, and so this line prints 1
#+END_SRC

** While Trap
#+BEGIN_SRC perl
  while ( readdir(DIR) ) {
  # WRONG: There may be file name just `0`

  while ( defined( my $line = <STDIN> ) ) {
  while ( defined( my $file = readdir(DIR) ) ) {
  # RIGHT
#+END_SRC

** Reference & Dereference
#+BEGIN_SRC perl
  # reference
  my $sref = \$scalar;
  my $aref = \@array;
  my $href = \%hash;
  my $cref = \&subroutine;

  # get element through reference of array or hash
  my $stooge = $aref->[1];
  my $stooge = $href->{Curly};

  # dereference
  my $other_scalar = ${$sref};
  my @other_array  = @{$aref};
  my %other_hash   = %{$href};
  &{$cref} # Call the referent.
#+END_SRC

* More to learn

** Devel::Tokenizer::C
The Devel::Tokenizer::C module provides a small class for creating the essential ANSI C source code for a fast keyword tokenizer.
https://metacpan.org/pod/Devel::Tokenizer::C
